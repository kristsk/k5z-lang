// Copyright (c) 2021 Krists Krigers <krists dot krigers at gmail dot com>. All rights reserved.
// SPDX-License-Identifier: MIT

library Crud;



import Muffin, Output from "Libraries/Muffin";
import Forms as F, FormElements as FE from "Libraries/Muffin/Form";



function Debug(val p1, val p2, opt suffix = "") {

    MaybeDebug("muffin.crud" .. suffix, p1, p2);
}



function ItemSources(val all_items_source, val one_item_source, val one_item_pk_source, val new_item_source, opt item_count_source = FALSE) {

    return [
        .all_items => all_items_source,
        .one_item => one_item_source,
        .one_item_pk => one_item_pk_source,
        .new_item => new_item_source,
        .item_count => item_count_source
    ];
}



function MakeMuffin(val item_sources, val mode_sources, opt initializer = FALSE) {

    crud_muffin_name = Muffin::Make(@(ref contexts) {

        contexts.muffin.item_sources = item_sources;

        contexts.muffin.content_source = @{

            Output::Html("CRUD MUFFIN SOURCE");
        };

        contexts.muffin.modes = [];

        foreach(mode_sources as mode_source) {

            @mode_source(contexts);
        }
    });

    if(initializer) {

        return_to = CurrentThreadName();

        SwitchToThread(
            crud_muffin_name,
            Muffin::MakeActionClosureHandler(
                initializer,
                @( SwitchToThread(return_to) )
            )
        );
    }

    return crud_muffin_name;
}



function GetItemByPk(ref contexts, val item_pk) {

    if(!contexts.muffin.item_sources.one_item) {

        Error("Item source 'one_item' is not set!");
    }

    return @contexts.muffin.item_sources.one_item(item_pk);
}



function GetPkFromItem(ref contexts, val item) {

    if(!contexts.muffin.item_sources.one_item_pk) {

        Error("Item source 'one_item_pk' is not set!");
    }

    return @contexts.muffin.item_sources.one_item_pk(item);
}



function GetNewItem(ref contexts) {

    if(!contexts.muffin.item_sources.new_item) {

        Error("Item source 'new_item' is not set!");
    }

    return @contexts.muffin.item_sources.new_item();
}


function GetAllItems(ref contexts, opt list_state = FALSE) {

    if(!contexts.muffin.item_sources.all_items) {

        Error("Item source 'all_items' is not set!");
    }

    return @contexts.muffin.item_sources.all_items(list_state);
}


function GetItemCount(ref contexts, opt list_state = FALSE) {

    if(!contexts.muffin.item_sources.item_count) {

        Error("Item source 'item_count' is not set!");
    }

    return @contexts.muffin.item_sources.item_count(list_state);
}
